#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3 effective-4.1.50 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef CL_SWIFT_H
#define CL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CL",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

/// Make sure you use  “[weak self] (sender) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL11BlockButton")
@interface BlockButton : UIButton
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y w:(CGFloat)w h:(CGFloat)h OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didPressed:(BlockButton * _Nonnull)sender;
- (void)highlight;
- (void)unhighlight;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL14BlockLongPress")
@interface BlockLongPress : UILongPressGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didLongPressed:(UILongPressGestureRecognizer * _Nonnull)longPress;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL8BlockPan")
@interface BlockPan : UIPanGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didPan:(UIPanGestureRecognizer * _Nonnull)pan;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL10BlockPinch")
@interface BlockPinch : UIPinchGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didPinch:(UIPinchGestureRecognizer * _Nonnull)pinch;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL10BlockSwipe")
@interface BlockSwipe : UISwipeGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didSwipe:(UISwipeGestureRecognizer * _Nonnull)swipe;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL8BlockTap")
@interface BlockTap : UITapGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)didTap:(UITapGestureRecognizer * _Nonnull)tap;
@end


/// Make sure you use  <code>[weak self] (NSURLRequest) in</code> if you are using the keyword <code>self</code> inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL12BlockWebView")
@interface BlockWebView : UIWebView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)webViewDidStartLoad:(UIWebView * _Nonnull)webView;
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
- (void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nonnull)error;
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
@end






















@class UITouch;
@class UIEvent;

/// A concrete subclass of UIPanGestureRecognizer that looks for panning (dragging) gestures in the setted direction.
SWIFT_CLASS("_TtC2CL33UIDirectionalPanGestureRecognizer")
@interface UIDirectionalPanGestureRecognizer : UIPanGestureRecognizer
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end













@class UIImage;

@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (UIImage * _Nonnull)toImage SWIFT_WARN_UNUSED_RESULT;
@end



@interface UIView (SWIFT_EXTENSION(CL))
/// EZSE: Shakes the view for as many number of times as given in the argument.
- (void)shakeViewForTimes:(NSInteger)times;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSE: convenience contructor to define a view based on width, height and base coordinates.
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y w:(CGFloat)w h:(CGFloat)h;
/// EZSE: puts padding around the view
- (nonnull instancetype)initWithSuperView:(UIView * _Nonnull)superView padding:(CGFloat)padding;
/// EZSwiftExtensions - Copies size of superview
- (nonnull instancetype)initWithSuperView:(UIView * _Nonnull)superView;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions [UIRectCorner.TopLeft, UIRectCorner.TopRight]
- (void)roundCorners:(UIRectCorner)corners radius:(CGFloat)radius;
/// EZSwiftExtensions - Remove all masking around UIView
- (void)nakedView;
@end



@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (void)setRotationX:(CGFloat)x;
/// EZSwiftExtensions
- (void)setRotationY:(CGFloat)y;
/// EZSwiftExtensions
- (void)setRotationZ:(CGFloat)z;
/// EZSwiftExtensions
- (void)setRotationWithX:(CGFloat)x y:(CGFloat)y z:(CGFloat)z;
/// EZSwiftExtensions
- (void)setScaleWithX:(CGFloat)x y:(CGFloat)y;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (void)springWithAnimations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)springWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)animateWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)animateWithAnimations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)pop;
/// EZSwiftExtensions
- (void)popBig;
- (void)reversePop;
@end

@class UIColor;

@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (void)setCornerRadiusWithRadius:(CGFloat)radius;
/// EZSwiftExtensions
- (void)addBorderWithWidth:(CGFloat)width color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderTopWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderTopWithPaddingWithSize:(CGFloat)size color:(UIColor * _Nonnull)color padding:(CGFloat)padding;
/// EZSwiftExtensions
- (void)addBorderBottomWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderLeftWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderRightWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)drawCircleWithFillColor:(UIColor * _Nonnull)fillColor strokeColor:(UIColor * _Nonnull)strokeColor strokeWidth:(CGFloat)strokeWidth;
/// EZSwiftExtensions
- (void)drawStrokeWithWidth:(CGFloat)width color:(UIColor * _Nonnull)color;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// http://stackoverflow.com/questions/4660371/how-to-add-a-touch-event-to-a-uiview/32182866#32182866
/// EZSwiftExtensions
- (void)addTapGestureWithTapNumber:(NSInteger)tapNumber target:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addTapGestureWithTapNumber:(NSInteger)tapNumber action:(void (^ _Nullable)(UITapGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addSwipeGestureWithDirection:(UISwipeGestureRecognizerDirection)direction numberOfTouches:(NSInteger)numberOfTouches target:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addSwipeGestureWithDirection:(UISwipeGestureRecognizerDirection)direction numberOfTouches:(NSInteger)numberOfTouches action:(void (^ _Nullable)(UISwipeGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addPanGestureWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addPanGestureWithAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addPinchGestureWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addPinchGestureWithAction:(void (^ _Nullable)(UIPinchGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addLongPressGestureWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addLongPressGestureWithAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))action;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSE: add multiple subviews
- (void)addSubviews:(NSArray<UIView *> * _Nonnull)views;
/// EZSE: resizes this view so it fits the largest subview
- (void)resizeToFitSubviews;
/// EZSE: resizes this view so it fits the largest subview
- (void)resizeToFitSubviews:(NSArray<NSNumber *> * _Nonnull)tagsToIgnore;
/// EZSE: resizes this view so as to fit its width.
- (void)resizeToFitWidth;
/// EZSE: resizes this view so as to fit its height.
- (void)resizeToFitHeight;
/// EZSE: getter and setter for the x coordinate of the frame’s origin for the view.
@property (nonatomic) CGFloat x;
/// EZSE: getter and setter for the y coordinate of the frame’s origin for the view.
@property (nonatomic) CGFloat y;
/// EZSE: variable to get the width of the view.
@property (nonatomic) CGFloat w;
/// EZSE: variable to get the height of the view.
@property (nonatomic) CGFloat h;
/// EZSE: getter and setter for the x coordinate of leftmost edge of the view.
@property (nonatomic) CGFloat left;
/// EZSE: getter and setter for the x coordinate of the rightmost edge of the view.
@property (nonatomic) CGFloat right;
/// EZSE: getter and setter for the y coordinate for the topmost edge of the view.
@property (nonatomic) CGFloat top;
/// EZSE: getter and setter for the y coordinate of the bottom most edge of the view.
@property (nonatomic) CGFloat bottom;
/// EZSE: getter and setter the frame’s origin point of the view.
@property (nonatomic) CGPoint origin;
/// EZSE: getter and setter for the X coordinate of the center of a view.
@property (nonatomic) CGFloat centerX;
/// EZSE: getter and setter for the Y coordinate for the center of a view.
@property (nonatomic) CGFloat centerY;
/// EZSE: getter and setter for frame size for the view.
@property (nonatomic) CGSize size;
/// EZSE: getter for an leftwards offset position from the leftmost edge.
- (CGFloat)leftOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: getter for an rightwards offset position from the rightmost edge.
- (CGFloat)rightOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: aligns the view to the top by a given offset.
- (CGFloat)topOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: align the view to the bottom by a given offset.
- (CGFloat)bottomOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: align the view widthwise to the right by a given offset.
- (CGFloat)alignRight:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSwiftExtensions
- (CGFloat)reorderSubViews:(BOOL)reorder tagsToIgnore:(NSArray<NSNumber *> * _Nonnull)tagsToIgnore SWIFT_WARN_UNUSED_RESULT;
- (void)removeSubviews;
/// EZSE: Centers view in superview horizontally
- (void)centerXInSuperView;
/// EZSE: Centers view in superview vertically
- (void)centerYInSuperView;
/// EZSE: Centers view in superview horizontally & vertically
- (void)centerInSuperView;
@end


@interface UIViewController (SWIFT_EXTENSION(CL))
- (void)keyboardDidShowNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardWillShowNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardWillHideNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardDidHideNotification:(NSNotification * _Nonnull)notification;
- (void)dismissKeyboard;
@end




/// The <code>ValidationError</code> class is used for representing errors of a failed validation. It contains the field, error label, and error message of a failed validation.
SWIFT_CLASS("_TtC2CL15ValidationError")
@interface ValidationError : NSObject
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.3 effective-4.1.50 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef CL_SWIFT_H
#define CL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CL",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

/// Make sure you use  “[weak self] (sender) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL11BlockButton")
@interface BlockButton : UIButton
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y w:(CGFloat)w h:(CGFloat)h OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didPressed:(BlockButton * _Nonnull)sender;
- (void)highlight;
- (void)unhighlight;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL14BlockLongPress")
@interface BlockLongPress : UILongPressGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didLongPressed:(UILongPressGestureRecognizer * _Nonnull)longPress;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL8BlockPan")
@interface BlockPan : UIPanGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didPan:(UIPanGestureRecognizer * _Nonnull)pan;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL10BlockPinch")
@interface BlockPinch : UIPinchGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didPinch:(UIPinchGestureRecognizer * _Nonnull)pinch;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL10BlockSwipe")
@interface BlockSwipe : UISwipeGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didSwipe:(UISwipeGestureRecognizer * _Nonnull)swipe;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL8BlockTap")
@interface BlockTap : UITapGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)didTap:(UITapGestureRecognizer * _Nonnull)tap;
@end


/// Make sure you use  <code>[weak self] (NSURLRequest) in</code> if you are using the keyword <code>self</code> inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL12BlockWebView")
@interface BlockWebView : UIWebView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)webViewDidStartLoad:(UIWebView * _Nonnull)webView;
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
- (void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nonnull)error;
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
@end






















@class UITouch;
@class UIEvent;

/// A concrete subclass of UIPanGestureRecognizer that looks for panning (dragging) gestures in the setted direction.
SWIFT_CLASS("_TtC2CL33UIDirectionalPanGestureRecognizer")
@interface UIDirectionalPanGestureRecognizer : UIPanGestureRecognizer
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end













@class UIImage;

@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (UIImage * _Nonnull)toImage SWIFT_WARN_UNUSED_RESULT;
@end



@interface UIView (SWIFT_EXTENSION(CL))
/// EZSE: Shakes the view for as many number of times as given in the argument.
- (void)shakeViewForTimes:(NSInteger)times;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSE: convenience contructor to define a view based on width, height and base coordinates.
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y w:(CGFloat)w h:(CGFloat)h;
/// EZSE: puts padding around the view
- (nonnull instancetype)initWithSuperView:(UIView * _Nonnull)superView padding:(CGFloat)padding;
/// EZSwiftExtensions - Copies size of superview
- (nonnull instancetype)initWithSuperView:(UIView * _Nonnull)superView;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions [UIRectCorner.TopLeft, UIRectCorner.TopRight]
- (void)roundCorners:(UIRectCorner)corners radius:(CGFloat)radius;
/// EZSwiftExtensions - Remove all masking around UIView
- (void)nakedView;
@end



@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (void)setRotationX:(CGFloat)x;
/// EZSwiftExtensions
- (void)setRotationY:(CGFloat)y;
/// EZSwiftExtensions
- (void)setRotationZ:(CGFloat)z;
/// EZSwiftExtensions
- (void)setRotationWithX:(CGFloat)x y:(CGFloat)y z:(CGFloat)z;
/// EZSwiftExtensions
- (void)setScaleWithX:(CGFloat)x y:(CGFloat)y;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (void)springWithAnimations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)springWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)animateWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)animateWithAnimations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)pop;
/// EZSwiftExtensions
- (void)popBig;
- (void)reversePop;
@end

@class UIColor;

@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (void)setCornerRadiusWithRadius:(CGFloat)radius;
/// EZSwiftExtensions
- (void)addBorderWithWidth:(CGFloat)width color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderTopWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderTopWithPaddingWithSize:(CGFloat)size color:(UIColor * _Nonnull)color padding:(CGFloat)padding;
/// EZSwiftExtensions
- (void)addBorderBottomWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderLeftWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderRightWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)drawCircleWithFillColor:(UIColor * _Nonnull)fillColor strokeColor:(UIColor * _Nonnull)strokeColor strokeWidth:(CGFloat)strokeWidth;
/// EZSwiftExtensions
- (void)drawStrokeWithWidth:(CGFloat)width color:(UIColor * _Nonnull)color;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// http://stackoverflow.com/questions/4660371/how-to-add-a-touch-event-to-a-uiview/32182866#32182866
/// EZSwiftExtensions
- (void)addTapGestureWithTapNumber:(NSInteger)tapNumber target:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addTapGestureWithTapNumber:(NSInteger)tapNumber action:(void (^ _Nullable)(UITapGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addSwipeGestureWithDirection:(UISwipeGestureRecognizerDirection)direction numberOfTouches:(NSInteger)numberOfTouches target:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addSwipeGestureWithDirection:(UISwipeGestureRecognizerDirection)direction numberOfTouches:(NSInteger)numberOfTouches action:(void (^ _Nullable)(UISwipeGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addPanGestureWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addPanGestureWithAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addPinchGestureWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addPinchGestureWithAction:(void (^ _Nullable)(UIPinchGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addLongPressGestureWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addLongPressGestureWithAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))action;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSE: add multiple subviews
- (void)addSubviews:(NSArray<UIView *> * _Nonnull)views;
/// EZSE: resizes this view so it fits the largest subview
- (void)resizeToFitSubviews;
/// EZSE: resizes this view so it fits the largest subview
- (void)resizeToFitSubviews:(NSArray<NSNumber *> * _Nonnull)tagsToIgnore;
/// EZSE: resizes this view so as to fit its width.
- (void)resizeToFitWidth;
/// EZSE: resizes this view so as to fit its height.
- (void)resizeToFitHeight;
/// EZSE: getter and setter for the x coordinate of the frame’s origin for the view.
@property (nonatomic) CGFloat x;
/// EZSE: getter and setter for the y coordinate of the frame’s origin for the view.
@property (nonatomic) CGFloat y;
/// EZSE: variable to get the width of the view.
@property (nonatomic) CGFloat w;
/// EZSE: variable to get the height of the view.
@property (nonatomic) CGFloat h;
/// EZSE: getter and setter for the x coordinate of leftmost edge of the view.
@property (nonatomic) CGFloat left;
/// EZSE: getter and setter for the x coordinate of the rightmost edge of the view.
@property (nonatomic) CGFloat right;
/// EZSE: getter and setter for the y coordinate for the topmost edge of the view.
@property (nonatomic) CGFloat top;
/// EZSE: getter and setter for the y coordinate of the bottom most edge of the view.
@property (nonatomic) CGFloat bottom;
/// EZSE: getter and setter the frame’s origin point of the view.
@property (nonatomic) CGPoint origin;
/// EZSE: getter and setter for the X coordinate of the center of a view.
@property (nonatomic) CGFloat centerX;
/// EZSE: getter and setter for the Y coordinate for the center of a view.
@property (nonatomic) CGFloat centerY;
/// EZSE: getter and setter for frame size for the view.
@property (nonatomic) CGSize size;
/// EZSE: getter for an leftwards offset position from the leftmost edge.
- (CGFloat)leftOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: getter for an rightwards offset position from the rightmost edge.
- (CGFloat)rightOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: aligns the view to the top by a given offset.
- (CGFloat)topOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: align the view to the bottom by a given offset.
- (CGFloat)bottomOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: align the view widthwise to the right by a given offset.
- (CGFloat)alignRight:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSwiftExtensions
- (CGFloat)reorderSubViews:(BOOL)reorder tagsToIgnore:(NSArray<NSNumber *> * _Nonnull)tagsToIgnore SWIFT_WARN_UNUSED_RESULT;
- (void)removeSubviews;
/// EZSE: Centers view in superview horizontally
- (void)centerXInSuperView;
/// EZSE: Centers view in superview vertically
- (void)centerYInSuperView;
/// EZSE: Centers view in superview horizontally & vertically
- (void)centerInSuperView;
@end


@interface UIViewController (SWIFT_EXTENSION(CL))
- (void)keyboardDidShowNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardWillShowNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardWillHideNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardDidHideNotification:(NSNotification * _Nonnull)notification;
- (void)dismissKeyboard;
@end




/// The <code>ValidationError</code> class is used for representing errors of a failed validation. It contains the field, error label, and error message of a failed validation.
SWIFT_CLASS("_TtC2CL15ValidationError")
@interface ValidationError : NSObject
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif

#else
// Generated by Apple Swift version 5.3 effective-4.1.50 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef CL_SWIFT_H
#define CL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CL",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

/// Make sure you use  “[weak self] (sender) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL11BlockButton")
@interface BlockButton : UIButton
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y w:(CGFloat)w h:(CGFloat)h OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didPressed:(BlockButton * _Nonnull)sender;
- (void)highlight;
- (void)unhighlight;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL14BlockLongPress")
@interface BlockLongPress : UILongPressGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didLongPressed:(UILongPressGestureRecognizer * _Nonnull)longPress;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL8BlockPan")
@interface BlockPan : UIPanGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didPan:(UIPanGestureRecognizer * _Nonnull)pan;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL10BlockPinch")
@interface BlockPinch : UIPinchGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didPinch:(UIPinchGestureRecognizer * _Nonnull)pinch;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL10BlockSwipe")
@interface BlockSwipe : UISwipeGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (void)didSwipe:(UISwipeGestureRecognizer * _Nonnull)swipe;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL8BlockTap")
@interface BlockTap : UITapGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)didTap:(UITapGestureRecognizer * _Nonnull)tap;
@end


/// Make sure you use  <code>[weak self] (NSURLRequest) in</code> if you are using the keyword <code>self</code> inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC2CL12BlockWebView")
@interface BlockWebView : UIWebView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)webViewDidStartLoad:(UIWebView * _Nonnull)webView;
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
- (void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nonnull)error;
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
@end






















@class UITouch;
@class UIEvent;

/// A concrete subclass of UIPanGestureRecognizer that looks for panning (dragging) gestures in the setted direction.
SWIFT_CLASS("_TtC2CL33UIDirectionalPanGestureRecognizer")
@interface UIDirectionalPanGestureRecognizer : UIPanGestureRecognizer
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end













@class UIImage;

@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (UIImage * _Nonnull)toImage SWIFT_WARN_UNUSED_RESULT;
@end



@interface UIView (SWIFT_EXTENSION(CL))
/// EZSE: Shakes the view for as many number of times as given in the argument.
- (void)shakeViewForTimes:(NSInteger)times;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSE: convenience contructor to define a view based on width, height and base coordinates.
- (nonnull instancetype)initWithX:(CGFloat)x y:(CGFloat)y w:(CGFloat)w h:(CGFloat)h;
/// EZSE: puts padding around the view
- (nonnull instancetype)initWithSuperView:(UIView * _Nonnull)superView padding:(CGFloat)padding;
/// EZSwiftExtensions - Copies size of superview
- (nonnull instancetype)initWithSuperView:(UIView * _Nonnull)superView;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions [UIRectCorner.TopLeft, UIRectCorner.TopRight]
- (void)roundCorners:(UIRectCorner)corners radius:(CGFloat)radius;
/// EZSwiftExtensions - Remove all masking around UIView
- (void)nakedView;
@end



@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (void)setRotationX:(CGFloat)x;
/// EZSwiftExtensions
- (void)setRotationY:(CGFloat)y;
/// EZSwiftExtensions
- (void)setRotationZ:(CGFloat)z;
/// EZSwiftExtensions
- (void)setRotationWithX:(CGFloat)x y:(CGFloat)y z:(CGFloat)z;
/// EZSwiftExtensions
- (void)setScaleWithX:(CGFloat)x y:(CGFloat)y;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (void)springWithAnimations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)springWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)animateWithDuration:(NSTimeInterval)duration animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)animateWithAnimations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// EZSwiftExtensions
- (void)pop;
/// EZSwiftExtensions
- (void)popBig;
- (void)reversePop;
@end

@class UIColor;

@interface UIView (SWIFT_EXTENSION(CL))
/// EZSwiftExtensions
- (void)setCornerRadiusWithRadius:(CGFloat)radius;
/// EZSwiftExtensions
- (void)addBorderWithWidth:(CGFloat)width color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderTopWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderTopWithPaddingWithSize:(CGFloat)size color:(UIColor * _Nonnull)color padding:(CGFloat)padding;
/// EZSwiftExtensions
- (void)addBorderBottomWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderLeftWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)addBorderRightWithSize:(CGFloat)size color:(UIColor * _Nonnull)color;
/// EZSwiftExtensions
- (void)drawCircleWithFillColor:(UIColor * _Nonnull)fillColor strokeColor:(UIColor * _Nonnull)strokeColor strokeWidth:(CGFloat)strokeWidth;
/// EZSwiftExtensions
- (void)drawStrokeWithWidth:(CGFloat)width color:(UIColor * _Nonnull)color;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// http://stackoverflow.com/questions/4660371/how-to-add-a-touch-event-to-a-uiview/32182866#32182866
/// EZSwiftExtensions
- (void)addTapGestureWithTapNumber:(NSInteger)tapNumber target:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addTapGestureWithTapNumber:(NSInteger)tapNumber action:(void (^ _Nullable)(UITapGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addSwipeGestureWithDirection:(UISwipeGestureRecognizerDirection)direction numberOfTouches:(NSInteger)numberOfTouches target:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addSwipeGestureWithDirection:(UISwipeGestureRecognizerDirection)direction numberOfTouches:(NSInteger)numberOfTouches action:(void (^ _Nullable)(UISwipeGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addPanGestureWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addPanGestureWithAction:(void (^ _Nullable)(UIPanGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addPinchGestureWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addPinchGestureWithAction:(void (^ _Nullable)(UIPinchGestureRecognizer * _Nonnull))action;
/// EZSwiftExtensions
- (void)addLongPressGestureWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
/// EZSwiftExtensions - Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
- (void)addLongPressGestureWithAction:(void (^ _Nullable)(UILongPressGestureRecognizer * _Nonnull))action;
@end


@interface UIView (SWIFT_EXTENSION(CL))
/// EZSE: add multiple subviews
- (void)addSubviews:(NSArray<UIView *> * _Nonnull)views;
/// EZSE: resizes this view so it fits the largest subview
- (void)resizeToFitSubviews;
/// EZSE: resizes this view so it fits the largest subview
- (void)resizeToFitSubviews:(NSArray<NSNumber *> * _Nonnull)tagsToIgnore;
/// EZSE: resizes this view so as to fit its width.
- (void)resizeToFitWidth;
/// EZSE: resizes this view so as to fit its height.
- (void)resizeToFitHeight;
/// EZSE: getter and setter for the x coordinate of the frame’s origin for the view.
@property (nonatomic) CGFloat x;
/// EZSE: getter and setter for the y coordinate of the frame’s origin for the view.
@property (nonatomic) CGFloat y;
/// EZSE: variable to get the width of the view.
@property (nonatomic) CGFloat w;
/// EZSE: variable to get the height of the view.
@property (nonatomic) CGFloat h;
/// EZSE: getter and setter for the x coordinate of leftmost edge of the view.
@property (nonatomic) CGFloat left;
/// EZSE: getter and setter for the x coordinate of the rightmost edge of the view.
@property (nonatomic) CGFloat right;
/// EZSE: getter and setter for the y coordinate for the topmost edge of the view.
@property (nonatomic) CGFloat top;
/// EZSE: getter and setter for the y coordinate of the bottom most edge of the view.
@property (nonatomic) CGFloat bottom;
/// EZSE: getter and setter the frame’s origin point of the view.
@property (nonatomic) CGPoint origin;
/// EZSE: getter and setter for the X coordinate of the center of a view.
@property (nonatomic) CGFloat centerX;
/// EZSE: getter and setter for the Y coordinate for the center of a view.
@property (nonatomic) CGFloat centerY;
/// EZSE: getter and setter for frame size for the view.
@property (nonatomic) CGSize size;
/// EZSE: getter for an leftwards offset position from the leftmost edge.
- (CGFloat)leftOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: getter for an rightwards offset position from the rightmost edge.
- (CGFloat)rightOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: aligns the view to the top by a given offset.
- (CGFloat)topOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: align the view to the bottom by a given offset.
- (CGFloat)bottomOffset:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSE: align the view widthwise to the right by a given offset.
- (CGFloat)alignRight:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
/// EZSwiftExtensions
- (CGFloat)reorderSubViews:(BOOL)reorder tagsToIgnore:(NSArray<NSNumber *> * _Nonnull)tagsToIgnore SWIFT_WARN_UNUSED_RESULT;
- (void)removeSubviews;
/// EZSE: Centers view in superview horizontally
- (void)centerXInSuperView;
/// EZSE: Centers view in superview vertically
- (void)centerYInSuperView;
/// EZSE: Centers view in superview horizontally & vertically
- (void)centerInSuperView;
@end


@interface UIViewController (SWIFT_EXTENSION(CL))
- (void)keyboardDidShowNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardWillShowNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardWillHideNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardDidHideNotification:(NSNotification * _Nonnull)notification;
- (void)dismissKeyboard;
@end




/// The <code>ValidationError</code> class is used for representing errors of a failed validation. It contains the field, error label, and error message of a failed validation.
SWIFT_CLASS("_TtC2CL15ValidationError")
@interface ValidationError : NSObject
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
